AbstractPerformanceEvaluator.java  --------------------------------------------------------
makeAdditionalChecks(MetaData metaData) {
				if (!(metaData instanceof ExampleSetMetaData)) {
					exampleSetInput.addError(new MetaDataUnderspecifiedError(exampleSetInput));
					return;
				}
				ExampleSetMetaData emd = (ExampleSetMetaData) metaData;
				if (emd.hasSpecial(Attributes.LABEL_NAME) == MetaDataInfo.YES
						&& emd.hasSpecial(Attributes.PREDICTION_NAME) == MetaDataInfo.YES) {
					int type1 = emd.getSpecial(Attributes.LABEL_NAME).getValueType();
					int type2 = emd.getSpecial(Attributes.PREDICTION_NAME).getValueType();
					if (type1 != type2) {
						exampleSetInput.addError(new SimpleMetaDataError(Severity.ERROR, exampleSetInput,
								"label_prediction_mismatch", new Object[] { Ontology.ATTRIBUTE_VALUE_TYPE.mapIndex(type1),
										Ontology.ATTRIBUTE_VALUE_TYPE.mapIndex(type2) }));
					} else if (!canEvaluate(type1)) {
						exampleSetInput.addError(new SimpleMetaDataError(Severity.ERROR, exampleSetInput,
								"cannot_evaluate_label_type", new Object[] { Ontology.ATTRIBUTE_VALUE_TYPE.mapIndex(type1) }));
					}
				}
			}

ROCChartGenerator.java  --------------------------------------------------------
makeAdditionalChecks(ExampleSetMetaData emd) throws UndefinedParameterError {
						MetaDataInfo contained = emd.containsSpecialAttribute(Attributes.PREDICTION_NAME);
						if (!getParameterAsBoolean(PARAMETER_USE_MODEL) && (contained != MetaDataInfo.YES)) {
							if (contained == MetaDataInfo.NO) {
								createError(Severity.ERROR, "exampleset.needs_prediction");
							} else {
								createError(Severity.WARNING, "exampleset.needs_prediction");
							}
						}
					}

KernelKMeans.java  --------------------------------------------------------
makeAdditionalChecks(MetaData received) {
						if (!(received instanceof ExampleSetMetaData)) {
							return;
						}
						ExampleSetMetaData emd = (ExampleSetMetaData) received;
						if (emd.hasSpecial(Attributes.WEIGHT_NAME) == MetaDataInfo.YES
								&& !getParameterAsBoolean(PARAMETER_USE_WEIGHTS)) {
							createError(Severity.WARNING, algoWeightQuickFix, "learner_does_not_support_weights");
						}
					}

FastICA.java  --------------------------------------------------------
makeAdditionalChecks(ExampleSetMetaData emd) throws UndefinedParameterError {
				int desiredComponents = getParameterAsInt(PARAMETER_NUMBER_OF_COMPONENTS);
				if (desiredComponents > emd.getNumberOfRegularAttributes()
						&& getParameterAsInt(PARAMETER_REDUCTION_TYPE) == REDUCTION_FIXED) {
					if (emd.getAttributeSetRelation() != SetRelation.UNKNOWN) {
						Severity sev = Severity.ERROR;
						if (emd.getAttributeSetRelation() == SetRelation.SUPERSET) {
							sev = Severity.WARNING;
						}
						exampleSetInput.addError(new SimpleMetaDataError(sev, exampleSetInput,
								Collections.singletonList(new ParameterSettingQuickFix(FastICA.this,
										PARAMETER_NUMBER_OF_COMPONENTS, emd.getNumberOfRegularAttributes() + "")),
								"exampleset.parameters.need_more_attributes", desiredComponents,
								PARAMETER_NUMBER_OF_COMPONENTS, desiredComponents));
					}
				}
				super.makeAdditionalChecks(emd);
			}

GSPOperator.java  --------------------------------------------------------
makeAdditionalChecks(MetaData metaData) {
				if (metaData instanceof ExampleSetMetaData) {
					ExampleSetMetaData emd = (ExampleSetMetaData) metaData;

					String customerAttribute = "";
					String timeAttribute = "";
					try {
						customerAttribute = getParameterAsString(PARAMETER_CUSTOMER_ATTRIBUTE);
						timeAttribute = getParameterAsString(PARAMETER_TIME_ATTRIBUTE);
					} catch (UndefinedParameterError e) {
					}

					// checking allowed types
					for (AttributeMetaData amd : emd.getAllAttributes()) {
						if (amd.isSpecial()) {
							continue;
						}
						// check if name is in ignore list
						if (amd.getName().equals(customerAttribute) || amd.getName().equals(timeAttribute)) {
							continue;
						}

						// otherwise do check
						if (!Ontology.ATTRIBUTE_VALUE_TYPE.isA(amd.getValueType(), Ontology.NOMINAL)) {
							createError(Severity.ERROR, "regular_type_mismatch",
									new Object[] { Ontology.ATTRIBUTE_VALUE_TYPE.mapIndex(Ontology.BINOMINAL) });
							break;
						}
					}
				}
			}

LibSVMLearner.java  --------------------------------------------------------
makeAdditionalChecks(MetaData received) {
				if (received instanceof ExampleSetMetaData) {
					ExampleSetMetaData emd = (ExampleSetMetaData) received;
					switch (emd.hasSpecial(Attributes.LABEL_NAME)) {
						case NO:
						case UNKNOWN:
							return;
						case YES:
							try {
								AttributeMetaData label = emd.getLabelMetaData();
								if (label.isNominal()) {
									if (getParameterAsInt(PARAMETER_SVM_TYPE) == SVM_TYPE_NU_SVR
											|| getParameterAsInt(PARAMETER_SVM_TYPE) == SVM_TYPE_EPS_SVR) {
										getExampleSetInputPort()
												.addError(
														new SimpleMetaDataError(Severity.ERROR, getExampleSetInputPort(),
																Collections.singletonList(new CategorySelectionQuickFix(
																		LibSVMLearner.this, PARAMETER_SVM_TYPE,
																		new String[] { SVM_TYPES[SVM_TYPE_C_SVC],
																				SVM_TYPES[SVM_TYPE_NU_SVC],
																				SVM_TYPES[SVM_TYPE_ONE_CLASS] },
																		SVM_TYPES[getParameterAsInt(PARAMETER_SVM_TYPE)],
																		"Select appropriate " + PARAMETER_SVM_TYPE + " for "
																				+ OperatorCapability.POLYNOMINAL_LABEL)),
																"parameters.cannot_handle",
																OperatorCapability.POLYNOMINAL_LABEL, PARAMETER_SVM_TYPE,
																SVM_TYPES[getParameterAsInt(PARAMETER_SVM_TYPE)]));
									}
								} else if (label.isNumerical()) {
									if (getParameterAsInt(PARAMETER_SVM_TYPE) == SVM_TYPE_NU_SVC
											|| getParameterAsInt(PARAMETER_SVM_TYPE) == SVM_TYPE_C_SVC) {
										getExampleSetInputPort()
												.addError(
														new SimpleMetaDataError(Severity.ERROR, getExampleSetInputPort(),
																Collections.singletonList(new CategorySelectionQuickFix(
																		LibSVMLearner.this, PARAMETER_SVM_TYPE,
																		new String[] { SVM_TYPES[SVM_TYPE_NU_SVR],
																				SVM_TYPES[SVM_TYPE_EPS_SVR] },
																		SVM_TYPES[getParameterAsInt(PARAMETER_SVM_TYPE)],
																		"Select appropriate " + PARAMETER_SVM_TYPE + " for "
																				+ OperatorCapability.NUMERICAL_LABEL)),
																"parameters.cannot_handle",
																OperatorCapability.NUMERICAL_LABEL, PARAMETER_SVM_TYPE,
																SVM_TYPES[getParameterAsInt(PARAMETER_SVM_TYPE)]));
									}
								}
							} catch (UndefinedParameterError e) {
							}
					}
				}
			}

ExampleSetToDictionary.java  --------------------------------------------------------
makeAdditionalChecks(ExampleSetMetaData dictionaryMD) throws UndefinedParameterError {
				if (dictionaryMD.getAttributeSetRelation() == SetRelation.EQUAL
						|| dictionaryMD.getAttributeSetRelation() == SetRelation.SUPERSET) {
					String from = getParameterAsString(PARAMETER_FROM_ATTRIBUTE);
					String to = getParameterAsString(PARAMETER_TO_ATTRIBUTE);
					if (!(dictionaryMD.containsAttributeName(from) == MetaDataInfo.YES) && !from.isEmpty()) {
						dictionaryInput.addError(new SimpleMetaDataError(Severity.ERROR, dictionaryInput,
								"missing_attribute", from));
					}
					if (!(dictionaryMD.containsAttributeName(to) == MetaDataInfo.YES) && !to.isEmpty()) {
						dictionaryInput.addError(new SimpleMetaDataError(Severity.ERROR, dictionaryInput,
								"missing_attribute", to));
					}
				}
			}

ANOVAMatrixOperator.java  --------------------------------------------------------
makeAdditionalChecks(ExampleSetMetaData emd) throws UndefinedParameterError {
				int numberOfNominals = 0;
				for (AttributeMetaData amd : emd.getAllAttributes()) {
					if (amd.isNominal()) {
						numberOfNominals++;
					}
				}
				if (numberOfNominals == 0) {
					createError(Severity.WARNING, "exampleset.must_contain_nominal_attribute");
				}
			}

CovarianceMatrixOperator.java  --------------------------------------------------------
makeAdditionalChecks(ExampleSetMetaData emd) throws UndefinedParameterError {
				for (AttributeMetaData amd : emd.getAllAttributes()) {
					if (!amd.isSpecial() && !amd.isNumerical()) {
						exampleSetInput.addError(new SimpleMetaDataError(Severity.WARNING, exampleSetInput,
								"not_defined_on_nominal", "Covariance"));
						break;
					}
				}
				super.makeAdditionalChecks(emd);
			}

