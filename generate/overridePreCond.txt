IOStorageOperator.java  --------------------------------------------------------
.addPrecondition(new Precondition() {

			@Override
			public void assumeSatisfied() {
				storeInput.receiveMD(new MetaData(getSelectedClass()));
			}

			@Override
			public void check(MetaData metaData) {
				Class<? extends IOObject> selected = getSelectedClass();
				if (metaData == null) {
					storeInput.addError(new InputMissingMetaDataError(storeInput, selected));
				} else {
					if (!selected.isAssignableFrom(metaData.getObjectClass())) {
						storeInput.addError(new InputMissingMetaDataError(storeInput, selected, metaData.getObjectClass()));
					}
				}
			}

			@Override
			public String getDescription() {
				return "expect: " + getSelectedClass();
			}

			@Override
			public boolean isCompatible(MetaData input, CompatibilityLevel level) {
				boolean result = input != null && getSelectedClass().isAssignableFrom(input.getObjectClass());
				return result;
			}

			@Override
			public MetaData getExpectedMetaData() {
				return new MetaData(IOObject.class);
			}

		})

ExampleSetIterator.java  --------------------------------------------------------
.addPrecondition(new SimplePrecondition(performanceInnerSink, new MetaData(
				PerformanceVector.class), false) {

			@Override
			public boolean isMandatory() {
				return ExampleSetIterator.this.getParameterAsBoolean(PARAMETER_ONLY_BEST);
			}
		})

RepeatUntilOperatorChain.java  --------------------------------------------------------
.addPrecondition(new SimplePrecondition(performanceConditionInput, new MetaData(PerformanceVector.class)) {

					@Override
					protected boolean isMandatory() {
						return getParameterAsBoolean(PARAMETER_CONDITION_PERFORMANCE);
					}
				})

.addPrecondition(new SimplePrecondition(exampleSetConditionInput, new MetaData(ExampleSet.class)) {

					@Override
					protected boolean isMandatory() {
						return getParameterAsBoolean(PARAMETER_CONDITION_EXAMPLES);
					}
				})

ValueSubgroupIteration.java  --------------------------------------------------------
.addPrecondition(new AttributeSetPrecondition(exampleSetInput, new AttributeNameProvider() {

			@Override
			public String[] getRequiredAttributeNames() {
				try {
					List<String[]> attributeValueOptions;
					attributeValueOptions = getParameterList(PARAMETER_ATTRIBUTES);
					String[] groupAttributes = new String[attributeValueOptions.size()];
					int i = 0;
					for (String[] pair : attributeValueOptions) {
						groupAttributes[i] = pair[0];
						i++;
					}
					return groupAttributes;
				} catch (UndefinedParameterError e) {
					return new String[0];
				}
			}
		}))

ZippedFileIterator.java  --------------------------------------------------------
.addPrecondition(new SimplePrecondition(fileInputPort, new MetaData(FileObject.class)) {

			@Override
			protected boolean isMandatory() {
				return false;
			}
		})

ExcelFormatExampleSource.java  --------------------------------------------------------
.addPrecondition(new SimplePrecondition(fileInputPort, new MetaData(FileObject.class)) {

			@Override
			protected boolean isMandatory() {
				return false;
			}
		})

AbstractPerformanceEvaluator.java  --------------------------------------------------------
.addPrecondition(new SimplePrecondition(exampleSetInput, new ExampleSetMetaData()) {

			@Override
			public void makeAdditionalChecks(MetaData metaData) {
				if (!(metaData instanceof ExampleSetMetaData)) {
					exampleSetInput.addError(new MetaDataUnderspecifiedError(exampleSetInput));
					return;
				}
				ExampleSetMetaData emd = (ExampleSetMetaData) metaData;
				if (emd.hasSpecial(Attributes.LABEL_NAME) == MetaDataInfo.YES
						&& emd.hasSpecial(Attributes.PREDICTION_NAME) == MetaDataInfo.YES) {
					int type1 = emd.getSpecial(Attributes.LABEL_NAME).getValueType();
					int type2 = emd.getSpecial(Attributes.PREDICTION_NAME).getValueType();
					if (type1 != type2) {
						exampleSetInput.addError(new SimpleMetaDataError(Severity.ERROR, exampleSetInput,
								"label_prediction_mismatch", new Object[] { Ontology.ATTRIBUTE_VALUE_TYPE.mapIndex(type1),
										Ontology.ATTRIBUTE_VALUE_TYPE.mapIndex(type2) }));
					} else if (!canEvaluate(type1)) {
						exampleSetInput.addError(new SimpleMetaDataError(Severity.ERROR, exampleSetInput,
								"cannot_evaluate_label_type", new Object[] { Ontology.ATTRIBUTE_VALUE_TYPE.mapIndex(type1) }));
					}
				}
			}
		})

IOTablePreprocessingOperator.java  --------------------------------------------------------
.addPrecondition(new Precondition() {
			@Override
			public void check(MetaData metaData) {
				TableMetaData tmd = BeltConversionTools.asTableMetaDataOrNull(metaData);
				if (tmd != null) {
					TableMetaData metaDataSubset = subsetSelector.getMetaDataSubset(tmd, false);
					if (metaDataSubset.labels().isEmpty()) {
						QuickFix selectAllQuickFix = new AbstractQuickFix(4, false, "attributefilter_select_all") {

							@Override
							public void apply() {
								IOTablePreprocessingOperator.this.getParameters().setParameter(TableSubsetSelector.PARAMETER_FILTER_NAME,
										TableSubsetSelector.ALL_ATTRIBUTES_FILTER);
							}
						};
						SimpleMetaDataError error =
								new SimpleMetaDataError(ProcessSetupError.Severity.WARNING, getTableInputPort(),
										Collections.singletonList(selectAllQuickFix),
										"attribute_selection_empty");
						getTableInputPort().addError(error);
					}
				}
			}

			@Override
			public String getDescription() {
				return "Example set matching at least one selected attribute.";
			}

			@Override
			public boolean isCompatible(MetaData input, CompatibilityLevel level) {
				return null != input && (IOTable.class.isAssignableFrom(input.getObjectClass()) ||
						AtPortConverter.isConvertible(input.getObjectClass(), IOTable.class));
			}

			@Override
			public void assumeSatisfied() {
				//not needed
			}

			@Override
			public MetaData getExpectedMetaData() {
				return new TableMetaData();
			}
		})

LiftParetoChartGenerator.java  --------------------------------------------------------
.addPrecondition(new SimplePrecondition(modelInput, new MetaData(Model.class)) {

			@Override
			protected boolean isMandatory() {
				ExampleSetMetaData emd = exampleSetInput.getMetaDataAsOrNull(ExampleSetMetaData.class);
				if (emd != null) {
					return emd.containsSpecialAttribute(Attributes.PREDICTION_NAME) == MetaDataInfo.NO;
				}
				return true;
			}
		})

ROCChartGenerator.java  --------------------------------------------------------
.addPrecondition(new ExampleSetPrecondition(exampleSetInput, Attributes.LABEL_NAME, Ontology.NOMINAL) {

					@Override
					public void makeAdditionalChecks(ExampleSetMetaData emd) throws UndefinedParameterError {
						MetaDataInfo contained = emd.containsSpecialAttribute(Attributes.PREDICTION_NAME);
						if (!getParameterAsBoolean(PARAMETER_USE_MODEL) && (contained != MetaDataInfo.YES)) {
							if (contained == MetaDataInfo.NO) {
								createError(Severity.ERROR, "exampleset.needs_prediction");
							} else {
								createError(Severity.WARNING, "exampleset.needs_prediction");
							}
						}
					}
				})

.addPrecondition(new SimplePrecondition(modelInput, new MetaData(Model.class)) {

			@Override
			protected boolean isMandatory() {
				return getParameterAsBoolean(PARAMETER_USE_MODEL);
			}
		})

KernelKMeans.java  --------------------------------------------------------
.addPrecondition(new SimplePrecondition(getExampleSetInputPort(), new ExampleSetMetaData(), false) {

					@Override
					public void makeAdditionalChecks(MetaData received) {
						if (!(received instanceof ExampleSetMetaData)) {
							return;
						}
						ExampleSetMetaData emd = (ExampleSetMetaData) received;
						if (emd.hasSpecial(Attributes.WEIGHT_NAME) == MetaDataInfo.YES
								&& !getParameterAsBoolean(PARAMETER_USE_WEIGHTS)) {
							createError(Severity.WARNING, algoWeightQuickFix, "learner_does_not_support_weights");
						}
					}
				})

GeneticAlgorithm.java  --------------------------------------------------------
.addPrecondition(new SimplePrecondition(attributeWeightsInput, new MetaData(
				AttributeWeights.class), false) {

			@Override
			public boolean isCompatible(MetaData input, CompatibilityLevel level) {
				if (isParameterSet(PARAMETER_INITIALIZE_WITH_INPUT_WEIGHTS)) {
					if (input.getObjectClass().equals(AttributeWeights.class)) {
						return getParameterAsBoolean(PARAMETER_INITIALIZE_WITH_INPUT_WEIGHTS);
					}
				}
				return false;
			}

			@Override
			protected boolean isMandatory() {
				if (isParameterSet(PARAMETER_INITIALIZE_WITH_INPUT_WEIGHTS)) {
					return getParameterAsBoolean(PARAMETER_INITIALIZE_WITH_INPUT_WEIGHTS);
				}
				return false;
			}
		})

FastICA.java  --------------------------------------------------------
.addPrecondition(new ExampleSetPrecondition(exampleSetInput, Ontology.NUMERICAL) {

			@Override
			public void makeAdditionalChecks(ExampleSetMetaData emd) throws UndefinedParameterError {
				int desiredComponents = getParameterAsInt(PARAMETER_NUMBER_OF_COMPONENTS);
				if (desiredComponents > emd.getNumberOfRegularAttributes()
						&& getParameterAsInt(PARAMETER_REDUCTION_TYPE) == REDUCTION_FIXED) {
					if (emd.getAttributeSetRelation() != SetRelation.UNKNOWN) {
						Severity sev = Severity.ERROR;
						if (emd.getAttributeSetRelation() == SetRelation.SUPERSET) {
							sev = Severity.WARNING;
						}
						exampleSetInput.addError(new SimpleMetaDataError(sev, exampleSetInput,
								Collections.singletonList(new ParameterSettingQuickFix(FastICA.this,
										PARAMETER_NUMBER_OF_COMPONENTS, emd.getNumberOfRegularAttributes() + "")),
								"exampleset.parameters.need_more_attributes", desiredComponents,
								PARAMETER_NUMBER_OF_COMPONENTS, desiredComponents));
					}
				}
				super.makeAdditionalChecks(emd);
			}
		})

DefaultLearner.java  --------------------------------------------------------
.addPrecondition(new ParameterConditionedPrecondition(exampleIn, new AttributeSetPrecondition(exampleIn,
				new AttributeSetPrecondition.AttributeNameProvider() {

					@Override
					public String[] getRequiredAttributeNames() {
						try {
							return new String[] { getParameterAsString(PARAMETER_ATTRIBUTE_NAME) };
						} catch (UndefinedParameterError e) {
							return new String[0];
						}
					}
				}), this, PARAMETER_METHOD, METHODS[ATTRIBUTE]))

GSPOperator.java  --------------------------------------------------------
.addPrecondition(new SimplePrecondition(exampleSetInput, new ExampleSetMetaData(), true) {

			@Override
			public void makeAdditionalChecks(MetaData metaData) {
				if (metaData instanceof ExampleSetMetaData) {
					ExampleSetMetaData emd = (ExampleSetMetaData) metaData;

					String customerAttribute = "";
					String timeAttribute = "";
					try {
						customerAttribute = getParameterAsString(PARAMETER_CUSTOMER_ATTRIBUTE);
						timeAttribute = getParameterAsString(PARAMETER_TIME_ATTRIBUTE);
					} catch (UndefinedParameterError e) {
					}

					// checking allowed types
					for (AttributeMetaData amd : emd.getAllAttributes()) {
						if (amd.isSpecial()) {
							continue;
						}
						// check if name is in ignore list
						if (amd.getName().equals(customerAttribute) || amd.getName().equals(timeAttribute)) {
							continue;
						}

						// otherwise do check
						if (!Ontology.ATTRIBUTE_VALUE_TYPE.isA(amd.getValueType(), Ontology.NOMINAL)) {
							createError(Severity.ERROR, "regular_type_mismatch",
									new Object[] { Ontology.ATTRIBUTE_VALUE_TYPE.mapIndex(Ontology.BINOMINAL) });
							break;
						}
					}
				}
			}
		})

LibSVMLearner.java  --------------------------------------------------------
.addPrecondition(new SimplePrecondition(getExampleSetInputPort(), null, false) {

			@Override
			public void makeAdditionalChecks(MetaData received) {
				if (received instanceof ExampleSetMetaData) {
					ExampleSetMetaData emd = (ExampleSetMetaData) received;
					switch (emd.hasSpecial(Attributes.LABEL_NAME)) {
						case NO:
						case UNKNOWN:
							return;
						case YES:
							try {
								AttributeMetaData label = emd.getLabelMetaData();
								if (label.isNominal()) {
									if (getParameterAsInt(PARAMETER_SVM_TYPE) == SVM_TYPE_NU_SVR
											|| getParameterAsInt(PARAMETER_SVM_TYPE) == SVM_TYPE_EPS_SVR) {
										getExampleSetInputPort()
												.addError(
														new SimpleMetaDataError(Severity.ERROR, getExampleSetInputPort(),
																Collections.singletonList(new CategorySelectionQuickFix(
																		LibSVMLearner.this, PARAMETER_SVM_TYPE,
																		new String[] { SVM_TYPES[SVM_TYPE_C_SVC],
																				SVM_TYPES[SVM_TYPE_NU_SVC],
																				SVM_TYPES[SVM_TYPE_ONE_CLASS] },
																		SVM_TYPES[getParameterAsInt(PARAMETER_SVM_TYPE)],
																		"Select appropriate " + PARAMETER_SVM_TYPE + " for "
																				+ OperatorCapability.POLYNOMINAL_LABEL)),
																"parameters.cannot_handle",
																OperatorCapability.POLYNOMINAL_LABEL, PARAMETER_SVM_TYPE,
																SVM_TYPES[getParameterAsInt(PARAMETER_SVM_TYPE)]));
									}
								} else if (label.isNumerical()) {
									if (getParameterAsInt(PARAMETER_SVM_TYPE) == SVM_TYPE_NU_SVC
											|| getParameterAsInt(PARAMETER_SVM_TYPE) == SVM_TYPE_C_SVC) {
										getExampleSetInputPort()
												.addError(
														new SimpleMetaDataError(Severity.ERROR, getExampleSetInputPort(),
																Collections.singletonList(new CategorySelectionQuickFix(
																		LibSVMLearner.this, PARAMETER_SVM_TYPE,
																		new String[] { SVM_TYPES[SVM_TYPE_NU_SVR],
																				SVM_TYPES[SVM_TYPE_EPS_SVR] },
																		SVM_TYPES[getParameterAsInt(PARAMETER_SVM_TYPE)],
																		"Select appropriate " + PARAMETER_SVM_TYPE + " for "
																				+ OperatorCapability.NUMERICAL_LABEL)),
																"parameters.cannot_handle",
																OperatorCapability.NUMERICAL_LABEL, PARAMETER_SVM_TYPE,
																SVM_TYPES[getParameterAsInt(PARAMETER_SVM_TYPE)]));
									}
								}
							} catch (UndefinedParameterError e) {
							}
					}
				}
			}
		})

AbstractDataResultSetReader.java  --------------------------------------------------------
.addPrecondition(new SimplePrecondition(fileInputPort, new MetaData(FileObject.class)) {

			@Override
			protected boolean isMandatory() {
				return false;
			}
		})

AbstractDataResultTableReader.java  --------------------------------------------------------
.addPrecondition(new SimplePrecondition(fileInputPort, new MetaData(FileObject.class)) {

			@Override
			protected boolean isMandatory() {
				return false;
			}
		})

ExampleSetToDictionary.java  --------------------------------------------------------
.addPrecondition(new ExampleSetPrecondition(dictionaryInput) {

			@Override
			public void makeAdditionalChecks(ExampleSetMetaData dictionaryMD) throws UndefinedParameterError {
				if (dictionaryMD.getAttributeSetRelation() == SetRelation.EQUAL
						|| dictionaryMD.getAttributeSetRelation() == SetRelation.SUPERSET) {
					String from = getParameterAsString(PARAMETER_FROM_ATTRIBUTE);
					String to = getParameterAsString(PARAMETER_TO_ATTRIBUTE);
					if (!(dictionaryMD.containsAttributeName(from) == MetaDataInfo.YES) && !from.isEmpty()) {
						dictionaryInput.addError(new SimpleMetaDataError(Severity.ERROR, dictionaryInput,
								"missing_attribute", from));
					}
					if (!(dictionaryMD.containsAttributeName(to) == MetaDataInfo.YES) && !to.isEmpty()) {
						dictionaryInput.addError(new SimpleMetaDataError(Severity.ERROR, dictionaryInput,
								"missing_attribute", to));
					}
				}
			}
		})

ANOVAMatrixOperator.java  --------------------------------------------------------
.addPrecondition(new ExampleSetPrecondition(exampleSetInput) {

			@Override
			public void makeAdditionalChecks(ExampleSetMetaData emd) throws UndefinedParameterError {
				int numberOfNominals = 0;
				for (AttributeMetaData amd : emd.getAllAttributes()) {
					if (amd.isNominal()) {
						numberOfNominals++;
					}
				}
				if (numberOfNominals == 0) {
					createError(Severity.WARNING, "exampleset.must_contain_nominal_attribute");
				}
			}
		})

CovarianceMatrixOperator.java  --------------------------------------------------------
.addPrecondition(new ExampleSetPrecondition(exampleSetInput) {

			@Override
			public void makeAdditionalChecks(ExampleSetMetaData emd) throws UndefinedParameterError {
				for (AttributeMetaData amd : emd.getAllAttributes()) {
					if (!amd.isSpecial() && !amd.isNumerical()) {
						exampleSetInput.addError(new SimpleMetaDataError(Severity.WARNING, exampleSetInput,
								"not_defined_on_nominal", "Covariance"));
						break;
					}
				}
				super.makeAdditionalChecks(emd);
			}
		})

